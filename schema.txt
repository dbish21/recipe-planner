Recipe Planner Database Schema
=============================

Tables
------

users
-----
id: UUID (PK)
email: VARCHAR(255) UNIQUE NOT NULL
username: VARCHAR(50) UNIQUE NOT NULL
password_hash: VARCHAR(255) NOT NULL
created_at: TIMESTAMP DEFAULT NOW()
updated_at: TIMESTAMP
last_login: TIMESTAMP

recipes
-------
id: UUID (PK)
title: VARCHAR(255) NOT NULL
description: TEXT
prep_time: INTEGER  // in minutes
cook_time: INTEGER  // in minutes
servings: INTEGER
difficulty: ENUM('easy', 'medium', 'hard')
image_url: VARCHAR(255)
source_url: VARCHAR(255)
created_by: UUID (FK -> users.id)
created_at: TIMESTAMP DEFAULT NOW()
updated_at: TIMESTAMP
is_public: BOOLEAN DEFAULT true
estimated_cost: DECIMAL(10,2)

recipe_ingredients
-----------------
id: UUID (PK)
recipe_id: UUID (FK -> recipes.id)
ingredient_id: UUID (FK -> ingredients.id)
amount: DECIMAL(10,2)
unit: VARCHAR(50)
notes: TEXT

ingredients
-----------
id: UUID (PK)
name: VARCHAR(255) NOT NULL
category: VARCHAR(100)  // e.g., produce, meat, dairy
base_unit: VARCHAR(50)  // e.g., grams, ml, pieces
average_cost: DECIMAL(10,2)  // per base unit
created_at: TIMESTAMP DEFAULT NOW()
updated_at: TIMESTAMP

recipe_instructions
------------------
id: UUID (PK)
recipe_id: UUID (FK -> recipes.id)
step_number: INTEGER
instruction: TEXT NOT NULL

recipe_nutrition
---------------
id: UUID (PK)
recipe_id: UUID (FK -> recipes.id)
calories: INTEGER
protein: DECIMAL(10,2)  // in grams
carbohydrates: DECIMAL(10,2)  // in grams
fat: DECIMAL(10,2)  // in grams
fiber: DECIMAL(10,2)  // in grams
sugar: DECIMAL(10,2)  // in grams
sodium: DECIMAL(10,2)  // in mg

meal_plans
----------
id: UUID (PK)
user_id: UUID (FK -> users.id)
name: VARCHAR(255)
start_date: DATE
end_date: DATE
created_at: TIMESTAMP DEFAULT NOW()
updated_at: TIMESTAMP

meal_plan_items
--------------
id: UUID (PK)
meal_plan_id: UUID (FK -> meal_plans.id)
recipe_id: UUID (FK -> recipes.id)
day_of_week: ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')
meal_type: ENUM('breakfast', 'lunch', 'dinner', 'snack')
servings: INTEGER
notes: TEXT

shopping_lists
-------------
id: UUID (PK)
user_id: UUID (FK -> users.id)
meal_plan_id: UUID (FK -> meal_plans.id)
name: VARCHAR(255)
created_at: TIMESTAMP DEFAULT NOW()
updated_at: TIMESTAMP

shopping_list_items
------------------
id: UUID (PK)
shopping_list_id: UUID (FK -> shopping_lists.id)
ingredient_id: UUID (FK -> ingredients.id)
amount: DECIMAL(10,2)
unit: VARCHAR(50)
is_purchased: BOOLEAN DEFAULT false
notes: TEXT

user_favorites
-------------
id: UUID (PK)
user_id: UUID (FK -> users.id)
recipe_id: UUID (FK -> recipes.id)
created_at: TIMESTAMP DEFAULT NOW()

recipe_tags
-----------
id: UUID (PK)
name: VARCHAR(100) UNIQUE NOT NULL

recipe_tag_mappings
------------------
recipe_id: UUID (FK -> recipes.id)
tag_id: UUID (FK -> recipe_tags.id)
PRIMARY KEY (recipe_id, tag_id)

Indexes
-------
- users(email)
- users(username)
- recipes(title)
- ingredients(name)
- meal_plan_items(meal_plan_id, day_of_week, meal_type)
- shopping_list_items(shopping_list_id, ingredient_id)
- recipe_ingredients(recipe_id)
- recipe_ingredients(ingredient_id)
- user_favorites(user_id, recipe_id)

Notes
-----
1. All timestamps use UTC
2. Soft deletion can be implemented by adding deleted_at TIMESTAMP columns
3. Cost calculations are stored in USD
4. Nutritional values are per serving
5. Images should be stored in a separate cloud storage service
6. Password hashing should use bcrypt or similar

Relationships
------------
- One user can have many recipes (created_by)
- One user can have many meal plans
- One meal plan can have many meal plan items
- One recipe can be in many meal plan items
- One shopping list belongs to one meal plan
- One shopping list has many shopping list items
- One recipe can have many recipe ingredients
- One ingredient can be in many recipe ingredients
- One recipe can have many recipe instructions
- One recipe can have one nutrition record
- One user can favorite many recipes
- One recipe can have many tags 